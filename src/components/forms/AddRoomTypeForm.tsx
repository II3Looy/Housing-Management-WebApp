"use client";

import { useState, useEffect } from "react";

interface AddRoomTypeFormProps {
    onSubmit: (data: RoomTypeFormData) => void;
    onCancel: () => void;
    initialData?: any; // Changed to any to accept API data structure
    isEdit?: boolean;
}

interface RoomTypeFormData {
    RoomType: string;
    RoomTypeID?: number; // Added for editing
}

// Helper function to convert API data to form data
const convertApiDataToFormData = (apiData: any): RoomTypeFormData => {
    return {
        RoomType: apiData.RoomType || "",
        RoomTypeID: apiData.RoomTypeID, // Include the ID for editing
    };
};

export function AddRoomTypeForm({ onSubmit, onCancel, initialData, isEdit = false }: AddRoomTypeFormProps) {
    const [formData, setFormData] = useState<RoomTypeFormData>({
        RoomType: "",
    });

    const [errors, setErrors] = useState<Partial<RoomTypeFormData>>({});

    // Initialize form with initial data if editing
    useEffect(() => {
        if (initialData && isEdit) {
            setFormData(convertApiDataToFormData(initialData));
        }
    }, [initialData, isEdit]);

    const handleSubmit = (e: React.FormEvent) => {
        e.preventDefault();
        
        // Validate form
        const newErrors: Partial<RoomTypeFormData> = {};
        
        if (!formData.RoomType.trim()) {
            newErrors.RoomType = "Please enter room type";
        }
        
        if (Object.keys(newErrors).length > 0) {
            setErrors(newErrors);
            return;
        }
        
        onSubmit(formData);
    };

    const handleChange = (field: keyof RoomTypeFormData, value: string | number) => {
        setFormData(prev => ({
            ...prev,
            [field]: value
        }));
        
        // Clear error when user starts typing
        if (errors[field]) {
            setErrors(prev => ({
                ...prev,
                [field]: undefined,
            }));
        }
    };

    return (
        <form onSubmit={handleSubmit} className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                    <label className="block text-sm font-medium text-gray-300 mb-2">
                        Room Type *
                    </label>
                    <input
                        type="text"
                        value={formData.RoomType}
                        onChange={(e) => handleChange('RoomType', e.target.value)}
                        className={`w-full px-3 py-2 bg-gray-900 border rounded-md text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-teal-500 focus:border-transparent ${
                            errors.RoomType ? "border-red-500" : "border-gray-700"
                        }`}
                        placeholder="Enter room type"
                        required
                    />
                    {errors.RoomType && (
                        <p className="mt-1 text-sm text-red-400">{errors.RoomType}</p>
                    )}
                </div>
            </div>

            <div className="bg-teal-900 bg-opacity-20 border border-teal-800 rounded-md p-4">
                <div className="flex items-start">
                    <div className="flex-shrink-0">
                        <svg className="h-5 w-5 text-teal-400" viewBox="0 0 20 20" fill="currentColor">
                            <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
                        </svg>
                    </div>
                    <div className="ml-3">
                        <h3 className="text-sm font-medium text-teal-300">
                            Room Type Information
                        </h3>
                        <div className="mt-2 text-sm text-teal-200">
                            <p>• Room Type ID will be automatically generated by the system</p>
                            <p>• Room type names should be unique</p>
                            <p>• Room types can be associated with multiple rooms</p>
                            <p>• Examples: Single, Double, Suite, Dormitory</p>
                        </div>
                    </div>
                </div>
            </div>

            <div className="flex justify-end space-x-3">
                <button
                    type="button"
                    onClick={onCancel}
                    className="px-4 py-2 text-sm font-medium text-gray-300 bg-gray-800 border border-gray-600 rounded-md hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500"
                >
                    Cancel
                </button>
                <button
                    type="submit"
                    className="px-4 py-2 text-sm font-medium text-white bg-teal-600 border border-transparent rounded-md hover:bg-teal-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-teal-500"
                >
                    {isEdit ? 'Update Room Type' : 'Create Room Type'}
                </button>
            </div>
        </form>
    );
}
